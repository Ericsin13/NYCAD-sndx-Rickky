name: Backend Build, Test & Push to ECR

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
    paths:
      - 'backend/**'
      - '.github/workflows/nycad-backendbuild.yml'
  schedule:
      - cron: '30 4 * * 0'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  BACKEND_REPO: nycad-backend-repo

jobs:
  build-test-push-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Run npm audit (fail on high)
        working-directory: frontend
        run: npm audit --audit-level=high

      - name: Run backend lint
        working-directory: backend
        run: npm run lint --if-present

      - name: Run backend tests
        working-directory: backend
        run: npm test --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build backend Docker image
        run: |
          docker build -t nycad-backend-repo ./backend
          docker tag nycad-backend-repo:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/nycad-backend-repo:latest

      - name: Run Trivy vulnerability scan on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_REPO }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Push backend Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/nycad-backend-repo:latest
